def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "florent37"
            name "Florent Champigny"
        }
    }
    scm {
        url "https://github.com/florent37/multiplatform-preferences"
    }
}


def _user = System.getenv("BINTRAY_USER")
def _key =  System.getenv("BINTRAY_API_KEY")
def _passphrase = System.getenv("BINTRAY_PASSPHRASE")

if(project.rootProject.file('local.properties').exists() && (_user == null || _user.isEmpty())){
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())

    _user = properties.getProperty("bintray.user")
    _key = properties.getProperty("bintray.apikey");
    _passphrase = properties.getProperty("bintray.gpg.password")
}


bintray {
    user = _user
    key = _key
    override = true
    //configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        desc = libraryDescription
        userOrg = orgName
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publish = true
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = _passphrase
                //Optional. The passphrase for GPG signing'
            }
        }
    }
}

afterEvaluate {
    project.publishing.publications.forEach { publication ->
        publication.pom.withXml {
            def root = asNode()
            root.appendNode('name', project.name)
            root.appendNode('description', 'Persisting settings on Android and iOS')
            root.appendNode('url', 'https://github.com/florent37/multiplatform-preferences')
            root.children().last() + pomConfig
        }
    }
}

bintrayUpload.doFirst {
    publications = project.publishing.publications
}
